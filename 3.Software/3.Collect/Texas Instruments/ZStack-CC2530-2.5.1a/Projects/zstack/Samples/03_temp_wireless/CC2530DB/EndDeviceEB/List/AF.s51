///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              30/Mar/2022  00:44:33
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\ZStack-CC2530-2.5.1a\Components\stack\af\AF.c
//    Command line       =  
//        -f C:\Users\ÍõÌì\AppData\Local\Temp\EWC8B.tmp ("C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Components\stack\af\AF.c" -D
//        NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        LCD_SUPPORTED=DEBUG -lC "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\Source\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        C:\Texas
//        Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02_fan_wireless\CC2530DB\EndDeviceEB\List\AF.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME AF

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,0203H
        PUBLIC `??AF_DataRequestSrcRtg::?relay`
        FUNCTION `??AF_DataRequestSrcRtg::?relay`,0203H
        PUBLIC `??afAPSF_ConfigGet::?relay`
        FUNCTION `??afAPSF_ConfigGet::?relay`,0203H
        PUBLIC `??afAPSF_ConfigSet::?relay`
        FUNCTION `??afAPSF_ConfigSet::?relay`,0203H
        FUNCTION `??afBuildMSGIncoming::?relay`,0203H
        PUBLIC `??afCopyAddress::?relay`
        FUNCTION `??afCopyAddress::?relay`,0203H
        PUBLIC `??afDataConfirm::?relay`
        FUNCTION `??afDataConfirm::?relay`,0203H
        PUBLIC `??afDataReqMTU::?relay`
        FUNCTION `??afDataReqMTU::?relay`,0203H
        PUBLIC `??afDelete::?relay`
        FUNCTION `??afDelete::?relay`,0203H
        PUBLIC `??afEndPoints::?relay`
        FUNCTION `??afEndPoints::?relay`,0203H
        PUBLIC `??afFindEndPointDesc::?relay`
        FUNCTION `??afFindEndPointDesc::?relay`,0203H
        FUNCTION `??afFindEndPointDescList::?relay`,0203H
        PUBLIC `??afFindSimpleDesc::?relay`
        FUNCTION `??afFindSimpleDesc::?relay`,0203H
        PUBLIC `??afGetMatch::?relay`
        FUNCTION `??afGetMatch::?relay`,0203H
        PUBLIC `??afIncomingData::?relay`
        FUNCTION `??afIncomingData::?relay`,0203H
        PUBLIC `??afNumEndPoints::?relay`
        FUNCTION `??afNumEndPoints::?relay`,0203H
        PUBLIC `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,0203H
        PUBLIC `??afRegisterExtended::?relay`
        FUNCTION `??afRegisterExtended::?relay`,0203H
        PUBLIC `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,0203H
        PUBLIC AF_DataRequest
        FUNCTION AF_DataRequest,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC AF_DataRequestDiscoverRoute
        PUBLIC AF_DataRequestSrcRtg
        FUNCTION AF_DataRequestSrcRtg,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC afAPSF_ConfigGet
        FUNCTION afAPSF_ConfigGet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC afAPSF_ConfigSet
        FUNCTION afAPSF_ConfigSet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION afBuildMSGIncoming,0a1203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC afCopyAddress
        FUNCTION afCopyAddress,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDataConfirm
        FUNCTION afDataConfirm,0a1203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afDataReqMTU
        FUNCTION afDataReqMTU,021203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDelete
        FUNCTION afDelete,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afEndPoints
        FUNCTION afEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION afFindEndPointDescList,0203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afFindSimpleDesc
        FUNCTION afFindSimpleDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afGetMatch
        FUNCTION afGetMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afIncomingData
        FUNCTION afIncomingData,0a1203H
        ARGFRAME XSTACK, 9, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC afNumEndPoints
        FUNCTION afNumEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afRegister
        FUNCTION afRegister,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afRegisterExtended
        FUNCTION afRegisterExtended,0a1203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afSetMatch
        FUNCTION afSetMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC epList
        PUBLIC new_cmd
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSDE_DataReq       SYMBOL "APSDE_DataReq"
`??APSDE_DataReq::?relay` SYMBOL "?relay", APSDE_DataReq
APSDE_DataReqMTU    SYMBOL "APSDE_DataReqMTU"
`??APSDE_DataReqMTU::?relay` SYMBOL "?relay", APSDE_DataReqMTU
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_IsAddressBroadcast SYMBOL "NLME_IsAddressBroadcast"
`??NLME_IsAddressBroadcast::?relay` SYMBOL "?relay", NLME_IsAddressBroadcast
RTG_AddSrcRtgEntry_Guaranteed SYMBOL "RTG_AddSrcRtgEntry_Guaranteed"
`??RTG_AddSrcRtgEntry_Guaranteed::?relay` SYMBOL "?relay", RTG_AddSrcRtgEntry_Guaranteed
RTG_CheckRtStatus   SYMBOL "RTG_CheckRtStatus"
`??RTG_CheckRtStatus::?relay` SYMBOL "?relay", RTG_CheckRtStatus
aps_FindGroupForEndpoint SYMBOL "aps_FindGroupForEndpoint"
`??aps_FindGroupForEndpoint::?relay` SYMBOL "?relay", aps_FindGroupForEndpoint
memset              SYMBOL "memset"
`??memset::?relay`  SYMBOL "?relay", memset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
AF_DataRequestSrcRtg SYMBOL "AF_DataRequestSrcRtg"
`??AF_DataRequestSrcRtg::?relay` SYMBOL "?relay", AF_DataRequestSrcRtg
afAPSF_ConfigGet    SYMBOL "afAPSF_ConfigGet"
`??afAPSF_ConfigGet::?relay` SYMBOL "?relay", afAPSF_ConfigGet
afAPSF_ConfigSet    SYMBOL "afAPSF_ConfigSet"
`??afAPSF_ConfigSet::?relay` SYMBOL "?relay", afAPSF_ConfigSet
afCopyAddress       SYMBOL "afCopyAddress"
`??afCopyAddress::?relay` SYMBOL "?relay", afCopyAddress
afDataConfirm       SYMBOL "afDataConfirm"
`??afDataConfirm::?relay` SYMBOL "?relay", afDataConfirm
afDataReqMTU        SYMBOL "afDataReqMTU"
`??afDataReqMTU::?relay` SYMBOL "?relay", afDataReqMTU
afDelete            SYMBOL "afDelete"
`??afDelete::?relay` SYMBOL "?relay", afDelete
afEndPoints         SYMBOL "afEndPoints"
`??afEndPoints::?relay` SYMBOL "?relay", afEndPoints
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
`??afFindEndPointDesc::?relay` SYMBOL "?relay", afFindEndPointDesc
afFindSimpleDesc    SYMBOL "afFindSimpleDesc"
`??afFindSimpleDesc::?relay` SYMBOL "?relay", afFindSimpleDesc
afGetMatch          SYMBOL "afGetMatch"
`??afGetMatch::?relay` SYMBOL "?relay", afGetMatch
afIncomingData      SYMBOL "afIncomingData"
`??afIncomingData::?relay` SYMBOL "?relay", afIncomingData
afNumEndPoints      SYMBOL "afNumEndPoints"
`??afNumEndPoints::?relay` SYMBOL "?relay", afNumEndPoints
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afRegisterExtended  SYMBOL "afRegisterExtended"
`??afRegisterExtended::?relay` SYMBOL "?relay", afRegisterExtended
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch

        EXTERN `??APSDE_DataReq::?relay`
        FUNCTION `??APSDE_DataReq::?relay`,00H
        EXTERN `??APSDE_DataReqMTU::?relay`
        FUNCTION `??APSDE_DataReqMTU::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_IsAddressBroadcast::?relay`
        FUNCTION `??NLME_IsAddressBroadcast::?relay`,00H
        EXTERN `??RTG_AddSrcRtgEntry_Guaranteed::?relay`
        FUNCTION `??RTG_AddSrcRtgEntry_Guaranteed::?relay`,00H
        EXTERN `??RTG_CheckRtStatus::?relay`
        FUNCTION `??RTG_CheckRtStatus::?relay`,00H
        EXTERN `??aps_FindGroupForEndpoint::?relay`
        FUNCTION `??aps_FindGroupForEndpoint::?relay`,00H
        EXTERN `??memset::?relay`
        FUNCTION `??memset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN APSDE_DataReq
        FUNCTION APSDE_DataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSDE_DataReqMTU
        FUNCTION APSDE_DataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_AddSrcRtgEntry_Guaranteed
        FUNCTION RTG_AddSrcRtgEntry_Guaranteed,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_CheckRtStatus
        FUNCTION RTG_CheckRtStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroupForEndpoint
        FUNCTION aps_FindGroupForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN apsfSendFragmented
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\ZStack-CC2530-2.5.1a\Components\stack\af\AF.c
//    1 /**************************************************************************************************
//    2   Filename:       AF.c
//    3   Revised:        $Date: 2011-11-18 16:03:29 -0800 (Fri, 18 Nov 2011) $
//    4   Revision:       $Revision: 28423 $
//    5 
//    6   Description:    Application Framework - Device Description helper functions
//    7 
//    8 
//    9   Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "nwk_globals.h"
//   47 #include "nwk_util.h"
//   48 #include "aps_groups.h"
//   49 #include "ZDProfile.h"
//   50 #include "aps_frag.h"
//   51 #include "rtg.h"
//   52 #include "string.h"
//   53 #if defined ( MT_AF_CB_FUNC )
//   54   #include "MT_AF.h"
//   55 #endif
//   56 
//   57 #if defined ( INTER_PAN )
//   58   #include "stub_aps.h"
//   59 #endif
//   60 
//   61 /*********************************************************************
//   62  * MACROS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * @fn      afSend
//   67  *
//   68  * @brief   Helper macro for V1 API to invoke V2 API.
//   69  *
//   70  * input parameters
//   71  *
//   72  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//   73  * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
//   74  * @param   cID - A valid cluster ID as specified by the Profile.
//   75  * @param   len - Number of bytes of data pointed to by next param.
//   76  * @param  *buf - A pointer to the data bytes to send.
//   77  * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
//   78  * @param  *transID - A pointer to a byte which can be modified and which will
//   79  *                    be used as the transaction sequence number of the msg.
//   80  *
//   81  * output parameters
//   82  *
//   83  * @param  *transID - Incremented by one if the return value is success.
//   84  *
//   85  * @return  afStatus_t - See previous definition of afStatus_... types.
//   86  */
//   87 #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \ 
//   88         AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \ 
//   89                           (cID), (len), (buf), (transID), (options), (radius) )
//   90 
//   91 /*********************************************************************
//   92  * GLOBAL VARIABLES
//   93  */
//   94 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   95 epList_t *epList;
epList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   96 
//   97 /*********************************************************************
//   98  * LOCAL FUNCTIONS
//   99  */
//  100 
//  101 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  102                 zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  103                 uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp );
//  104 
//  105 static epList_t *afFindEndPointDescList( uint8 EndPoint );
//  106 
//  107 static pDescCB afGetDescCB( endPointDesc_t *epDesc );
//  108 
//  109 /*********************************************************************
//  110  * PUBLIC FUNCTIONS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * @fn      afInit
//  115  *
//  116  * @brief   Initialization function for the AF.
//  117  *
//  118  * @param   none
//  119  *
//  120  * @return  none
//  121 void afInit( void )
//  122 {
//  123 }
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * @fn      afRegisterExtended
//  128  *
//  129  * @brief   Register an Application's EndPoint description.
//  130  *
//  131  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  132  * @param   descFn - pointer to descriptor callback function
//  133  *
//  134  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  135  *
//  136  * @return  Pointer to epList_t on success, NULL otherwise.
//  137  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  138 epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
afRegisterExtended:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function afRegisterExtended
        CODE
//  139 {
        FUNCALL afRegisterExtended, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  140   epList_t *ep = osal_mem_alloc(sizeof(epList_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x9
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
//  141 
//  142   if (ep != NULL)
        MOV       A,R2
        ORL       A,R3
        JZ        ??afRegisterExtended_0
//  143   {
//  144     ep->nextDesc = epList;
        MOV       DPTR,#epList
        LCALL     ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine40_0 & 0xFFFF
//  145     epList = ep;
??CrossCallReturnLabel_55:
        MOV       DPTR,#epList
        LCALL     ?Subroutine28 & 0xFFFF
//  146     ep->epDesc = epDesc;
??CrossCallReturnLabel_33:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        LCALL     ?Subroutine27 & 0xFFFF
//  147     ep->pfnDescCB = descFn;
//  148     ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
//  149     ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
//  150     ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
//  151   }
??CrossCallReturnLabel_31:
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_32:
        INC       DPTR
        INC       DPTR
        MOV       A,#0x32
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV       A,#0x1
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_27:
        INC       DPTR
        MOVX      @DPTR,A
//  152 
//  153   return ep;
??afRegisterExtended_0:
        LJMP      ?Subroutine0 & 0xFFFF
//  154 }
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function afRegisterExtended
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_45:
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function afRegisterExtended
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_32
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-4
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function afRegisterExtended
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_26
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-4
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function afRegisterExtended
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_27
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-4
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function afRegisterExtended
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_46:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
//  155 
//  156 /*********************************************************************
//  157  * @fn      afRegister
//  158  *
//  159  * @brief   Register an Application's EndPoint description.
//  160  *
//  161  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  162  *
//  163  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  164  *
//  165  * @return  afStatus_SUCCESS - Registered
//  166  *          afStatus_MEM_FAIL - not enough memory to add descriptor
//  167  *          afStatus_INVALID_PARAMETER - duplicate endpoint
//  168  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  169 afStatus_t afRegister( endPointDesc_t *epDesc )
afRegister:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function afRegister
        CODE
//  170 {
        FUNCALL afRegister, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afRegister, afRegisterExtended
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  171   if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
        ; Setup parameters for call to function afFindEndPointDescList
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        ??afRegister_0
//  172   {
//  173     return afStatus_INVALID_PARAMETER;
        MOV       R1,#0x2
        SJMP      ??afRegister_1
//  174   }
//  175 
//  176   return ((NULL == afRegisterExtended(epDesc, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
??afRegister_0:
        ; Setup parameters for call to function afRegisterExtended
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JNZ       ??afRegister_2
        MOV       R1,#0x10
        SJMP      ??afRegister_1
??afRegister_2:
        MOV       R1,#0x0
??afRegister_1:
        LJMP      ?Subroutine1 & 0xFFFF
//  177 }
          CFI EndBlock cfiBlock12
//  178 
//  179 /*********************************************************************
//  180  * @fn      afDelete
//  181  *
//  182  * @brief   Delete an Application's EndPoint descriptor and frees the memory
//  183  *
//  184  * @param   EndPoint - Application Endpoint to delete
//  185  *
//  186  * @return  afStatus_SUCCESS - endpoint deleted
//  187  *          afStatus_INVALID_PARAMETER - endpoint not found
//  188  *          afStatus_FAILED - endpoint list empty
//  189  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  190 afStatus_t afDelete( uint8 EndPoint )
afDelete:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function afDelete
        CODE
//  191 {
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  192   epList_t *epCurrent;
//  193   epList_t *epPrevious;
//  194 
//  195   if (epList != NULL)
        MOV       DPTR,#epList
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_95:
        JZ        ??afDelete_0
//  196   {
//  197     epPrevious = epCurrent = epList;
        MOV       DPTR,#epList
        LCALL     ??Subroutine46_0 & 0xFFFF
//  198 
//  199     // first element of the list matches
//  200     if (epCurrent->epDesc->endPoint == EndPoint)
??CrossCallReturnLabel_106:
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_18:
        JNZ       ??afDelete_1
//  201     {
//  202       epList = epCurrent->nextDesc;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine42_0 & 0xFFFF
//  203       osal_mem_free(epCurrent);
//  204 
//  205       return (afStatus_SUCCESS);
//  206     }
??CrossCallReturnLabel_70:
        MOV       DPTR,#epList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        SJMP      ??afDelete_2
//  207     else
//  208     {
//  209       // search the list
//  210       for (epCurrent = epPrevious->nextDesc; epCurrent != NULL; epPrevious = epCurrent)
??afDelete_1:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_12:
        JNZ       ??afDelete_3
//  211       {
//  212         if (epCurrent->epDesc->endPoint == EndPoint)
//  213         {
//  214           epPrevious->nextDesc = epCurrent->nextDesc;
//  215           osal_mem_free(epCurrent);
//  216 
//  217           // delete the entry and free the memory
//  218           return (afStatus_SUCCESS);
//  219         }
//  220       }
//  221     }
//  222 
//  223     // no endpoint found
//  224     return (afStatus_INVALID_PARAMETER);
        MOV       R1,#0x2
        SJMP      ??afDelete_4
??afDelete_5:
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
??afDelete_3:
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_19:
        JNZ       ??afDelete_5
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
??afDelete_2:
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       R1,#0x0
        SJMP      ??afDelete_4
//  225   }
//  226   else
//  227   {
//  228     // epList is empty
//  229     return (afStatus_FAILED);
??afDelete_0:
        MOV       R1,#0x1
//  230   }
??afDelete_4:
          CFI EndBlock cfiBlock13
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  231 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function afDelete
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R4
        MOVX      A,@DPTR
        XRL       A,R6
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
//  232 
//  233 /*********************************************************************
//  234  * @fn          afDataConfirm
//  235  *
//  236  * @brief       This function will generate the Data Confirm back to
//  237  *              the application.
//  238  *
//  239  * @param       endPoint - confirm end point
//  240  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  241  * @param       status - status of APSDE_DATA_REQUEST
//  242  *
//  243  * @return      none
//  244  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  245 void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
afDataConfirm:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function afDataConfirm
        CODE
//  246 {
        FUNCALL afDataConfirm, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
        MOV       A,R2
        MOV       R7,A
        MOV       ?V0,R3
//  247   endPointDesc_t *epDesc;
//  248   afDataConfirm_t *msgPtr;
//  249 
//  250   // Find the endpoint description
//  251   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V4,R2
        MOV       ?V5,R3
//  252   if ( epDesc == NULL )
        MOV       A,R2
        ORL       A,?V5
        JZ        ??afDataConfirm_0
//  253     return;
//  254 
//  255   // Determine the incoming command type
//  256   msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  257   if ( msgPtr )
        MOV       A,R2
        ORL       A,R3
        JZ        ??afDataConfirm_0
//  258   {
//  259     // Build the Data Confirm message
//  260     msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x3
        MOVX      @DPTR,A
//  261     msgPtr->hdr.status = status;
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
//  262     msgPtr->endpoint = endPoint;
        MOV       A,R6
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  263     msgPtr->transID = transID;
        MOV       A,R7
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  264 
//  265 #if defined ( MT_AF_CB_FUNC )
//  266     /* If MT has subscribed for this callback, don't send as a message. */
//  267     if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
//  268     {
//  269       /* Send callback if it's subscribed */
//  270       MT_AfDataConfirm ((void *)msgPtr);
//  271       /* Release the memory. */
//  272       osal_msg_deallocate( (void *)msgPtr );
//  273     }
//  274     else
//  275 #endif
//  276     {
//  277       /* send message through task message */
//  278       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ?Subroutine9 & 0xFFFF
//  279     }
//  280   }
??CrossCallReturnLabel_88:
        MOV       R1,A
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  281 }
??afDataConfirm_0:
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock18
//  282 
//  283 /*********************************************************************
//  284  * @fn          afIncomingData
//  285  *
//  286  * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
//  287  *
//  288  * @param       aff  - pointer to APS frame format
//  289  * @param       SrcAddress  - Source address
//  290  * @param       SrcPanId  - Source PAN ID
//  291  * @param       sig - incoming message's link quality
//  292  * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
//  293  * @param       SecurityUse - Security enable/disable
//  294  * @param       timestamp - the MAC Timer2 timestamp at Rx.
//  295  *
//  296  * @return      none
//  297  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  298 void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
afIncomingData:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function afIncomingData
        CODE
//  299                      NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp )
//  300 {
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afBuildMSGIncoming
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
//  301   endPointDesc_t *epDesc = NULL;
//  302   epList_t *pList = epList;
        MOV       DPTR,#epList
        LCALL     ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine40_0 & 0xFFFF
//  303 #if !defined ( APS_NO_GROUPS )
//  304   uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
??CrossCallReturnLabel_56:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x2
        MOVX      @DPTR,A
//  305 #endif
//  306 
//  307   if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_2:
        JNZ       ??afIncomingData_0
//  308   {
//  309 #if !defined ( APS_NO_GROUPS )
//  310     // Find the first endpoint for this group
//  311     grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV       R1,#-0x2
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  312     if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
        XRL       A,#0xfe
        JNZ       $+5
        LJMP      ??afIncomingData_1 & 0xFFFF
//  313       return;   // No endpoint found
//  314 
//  315     epDesc = afFindEndPointDesc( grpEp );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
//  316     if ( epDesc == NULL )
        MOV       A,R6
        ORL       A,R7
        JNZ       ??afIncomingData_2
//  317       return;   // Endpoint descriptor not found
        LJMP      ??afIncomingData_1 & 0xFFFF
//  318 
//  319     pList = afFindEndPointDescList( epDesc->endPoint );
//  320 #else
//  321     return; // Not supported
//  322 #endif
//  323   }
//  324   else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_0:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_22:
        JNZ       ??afIncomingData_3
//  325   {
//  326     // Set the list
//  327     if ( pList != NULL )
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_96:
        JNZ       $+5
        LJMP      ??afIncomingData_1 & 0xFFFF
//  328     {
//  329       epDesc = pList->epDesc;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
//  330     }
//  331   }
??CrossCallReturnLabel_6:
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        SJMP      ??CrossCallReturnLabel_7
//  332   else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
??afIncomingData_3:
        ; Setup parameters for call to function afFindEndPointDesc
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_52:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??CrossCallReturnLabel_6
//  333   {
//  334     pList = afFindEndPointDescList( epDesc->endPoint );
??afIncomingData_2:
        ; Setup parameters for call to function afFindEndPointDescList
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
//  335   }
??CrossCallReturnLabel_35:
        SJMP      ??CrossCallReturnLabel_6
//  336 
//  337   while ( epDesc )
//  338   {
//  339     uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
//  340 
//  341     if ( pList->pfnDescCB )
//  342     {
//  343       uint16 *pID = (uint16 *)(pList->pfnDescCB(
//  344                                  AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
//  345       if ( pID )
//  346       {
//  347         epProfileID = *pID;
//  348         osal_mem_free( pID );
//  349       }
//  350     }
//  351     else if ( epDesc->simpleDesc )
//  352     {
//  353       epProfileID = epDesc->simpleDesc->AppProfId;
//  354     }
//  355 
//  356     if ( (aff->ProfileID == epProfileID) ||
//  357          ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
//  358     {
//  359       {
//  360         // Save original endpoint
//  361         uint8 endpoint = aff->DstEndPoint;
//  362 
//  363         // overwrite with descriptor's endpoint
//  364         aff->DstEndPoint = epDesc->endPoint;
//  365 
//  366         afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
//  367                            nwkSeqNum, SecurityUse, timestamp );
//  368 
//  369         // Restore with original endpoint
//  370         aff->DstEndPoint = endpoint;
//  371       }
//  372     }
//  373 
//  374     if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
//  375     {
//  376 #if !defined ( APS_NO_GROUPS )
//  377       // Find the next endpoint for this group
//  378       grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
//  379       if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
//  380         return;   // No endpoint found
//  381 
//  382       epDesc = afFindEndPointDesc( grpEp );
//  383       if ( epDesc == NULL )
//  384         return;   // Endpoint descriptor not found
//  385 
//  386       pList = afFindEndPointDescList( epDesc->endPoint );
//  387 #else
//  388       return;
//  389 #endif
//  390     }
//  391     else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
//  392     {
//  393       pList = pList->nextDesc;
//  394       if ( pList )
//  395         epDesc = pList->epDesc;
??afIncomingData_4:
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??afIncomingData_1 & 0xFFFF
        SJMP      ??CrossCallReturnLabel_36
??afIncomingData_5:
        ; Setup parameters for call to function afFindEndPointDescList
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV       ?V6,#-0x1
        MOV       ?V7,#-0x1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_115:
        INC       DPTR
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV       DPL,R6
        MOV       DPH,R7
        JZ        ??afIncomingData_6
        ; Setup parameters for indirect call
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R1,#0x2
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_116:
        LCALL     ?CALL_IND
        MOV       A,R2
        ORL       A,R3
        JZ        ??CrossCallReturnLabel_16
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??CrossCallReturnLabel_16
??afIncomingData_6:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_100:
        JZ        ??CrossCallReturnLabel_16
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_53:
        INC       DPTR
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_4:
        MOVX      A,@DPTR
        XRL       A,?V6
        JNZ       ??afIncomingData_7
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V7
??afIncomingData_7:
        JZ        ??afIncomingData_8
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??CrossCallReturnLabel_25 & 0xFFFF
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_97:
        JNZ       ??CrossCallReturnLabel_25
??afIncomingData_8:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_24:
        ; Setup parameters for call to function afBuildMSGIncoming
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        JNZ       ??afIncomingData_9
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        XRL       A,#0xfe
        JZ        ??afIncomingData_1
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
        MOV       A,R6
        ORL       A,R7
        JZ        $+5
        LJMP      ??afIncomingData_5 & 0xFFFF
        SJMP      ??afIncomingData_1
??afIncomingData_9:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_23:
        JNZ       ??afIncomingData_1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        ORL       A,R1
        JZ        $+5
        LJMP      ??afIncomingData_4 & 0xFFFF
//  396       else
//  397         epDesc = NULL;
//  398     }
//  399     else
//  400       epDesc = NULL;
//  401   }
//  402 }
??afIncomingData_1:
        MOV       A,#0x9
          CFI EndBlock cfiBlock19
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function afIncomingData
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOVX      A,@DPTR
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function AF_DataRequest
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function afIncomingData
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function AF_DataRequest
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        INC       DPTR
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function afIncomingData
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function afIncomingData
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function AF_DataRequest
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        LCALL     ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_118:
        RET
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function afIncomingData
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_48:
        CPL       A
        RET
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function afIncomingData
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function afIncomingData
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_23
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-4
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function afIncomingData
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_6
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-4
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function afIncomingData
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_7
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-4
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        LCALL     ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_119:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function afIncomingData
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function afIncomingData
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker52 Using cfiCommon1
          CFI (cfiPicker52) NoFunction
          CFI (cfiPicker52) Picker
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_91:
        ANL       A,#0xc
        XRL       A,#0xc
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function afIncomingData
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_49:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55
//  403 
//  404 /*********************************************************************
//  405  * @fn          afBuildMSGIncoming
//  406  *
//  407  * @brief       Build the message for the app
//  408  *
//  409  * @param
//  410  *
//  411  * @return      pointer to next in data buffer
//  412  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  413 uint8 new_cmd[1024];
new_cmd:
        DS 1024
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  414 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
afBuildMSGIncoming:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function afBuildMSGIncoming
        CODE
//  415                  zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  416                  uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp )
//  417 {
        FUNCALL afBuildMSGIncoming, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, afCopyAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
        MOV       ?V3,R1
//  418   afIncomingMSGPacket_t *MSGpkt;
//  419   const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
        MOV       A,R2
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_41:
        ADD       A,#0x24
        MOV       ?V2,A
//  420   uint8 *asdu = aff->asdu;
        MOV       A,R2
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine40_0 & 0xFFFF
//  421   MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
??CrossCallReturnLabel_58:
        ; Setup parameters for call to function osal_msg_allocate
        MOV       R2,?V2
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
//  422 
//  423   if ( MSGpkt == NULL )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??afBuildMSGIncoming_0 & 0xFFFF
//  424   {
//  425     return;
//  426   }
//  427 
//  428   MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x1a
        LCALL     ?Subroutine26 & 0xFFFF
//  429   MSGpkt->groupId = aff->GroupID;
??CrossCallReturnLabel_28:
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     ??Subroutine40_0 & 0xFFFF
//  430   MSGpkt->clusterId = aff->ClusterID;
??CrossCallReturnLabel_59:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_9:
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine40_0 & 0xFFFF
//  431   afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
??CrossCallReturnLabel_60:
        ; Setup parameters for call to function afCopyAddress
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV       A,R6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
//  432   MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  433   MSGpkt->endPoint = epDesc->endPoint;
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  434   MSGpkt->wasBroadcast = aff->wasBroadcast;
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x15
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine19 & 0xFFFF
//  435   MSGpkt->LinkQuality = sig->LinkQuality;
??CrossCallReturnLabel_20:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  436   MSGpkt->correlation = sig->correlation;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  437   MSGpkt->rssi = sig->rssi;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x18
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  438   MSGpkt->SecurityUse = SecurityUse;
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  439   MSGpkt->timestamp = timestamp;
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XLOAD_R0123
        MOV       A,R6
        ADD       A,#0x1a
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?XSTORE_R0123
//  440   MSGpkt->nwkSeqNum = nwkSeqNum;
        MOV       A,R6
        ADD       A,#0x1e
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOV       A,?V3
        LCALL     ?Subroutine26 & 0xFFFF
//  441   MSGpkt->macDestAddr = aff->macDestAddr;
??CrossCallReturnLabel_29:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV       A,R6
        ADD       A,#0x12
        LCALL     ?Subroutine24 & 0xFFFF
//  442   MSGpkt->srcAddr.panId = SrcPanId;
??CrossCallReturnLabel_67:
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV       A,R6
        ADD       A,#0x10
        LCALL     ?Subroutine24 & 0xFFFF
//  443   MSGpkt->cmd.TransSeqNumber = 0;
??CrossCallReturnLabel_68:
        MOV       A,R6
        ADD       A,#0x1f
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
//  444   MSGpkt->cmd.DataLength = aff->asduLength;
        MOV       A,R6
        ADD       A,#0x20
        MOV       ?V4,A
        CLR       A
        ADDC      A,R7
        MOV       ?V5,A
        MOV       A,?V0
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  445   memset(new_cmd, 0, len);
        ; Setup parameters for call to function memset
        MOV       A,?V2
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#new_cmd & 0xff
        MOV       R3,#(new_cmd >> 8) & 0xff
        LCALL     `??memset::?relay`; Banked call to: memset
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  446   if ( MSGpkt->cmd.DataLength )
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        JZ        ??afBuildMSGIncoming_1
//  447   {
//  448     MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        MOV       A,R6
        ADD       A,#0x24
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL     ?Subroutine28 & 0xFFFF
//  449     osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
??CrossCallReturnLabel_37:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       ?V2,#0x0
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 21)
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
//  450     osal_memcpy( new_cmd, asdu, MSGpkt->cmd.DataLength );
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 21)
        LCALL     ?Subroutine15 & 0xFFFF
//  451 
//  452   }
??CrossCallReturnLabel_86:
        MOV       R2,#new_cmd & 0xff
        MOV       R3,#(new_cmd >> 8) & 0xff
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        SJMP      ??afBuildMSGIncoming_2
//  453   else
//  454   {
//  455     MSGpkt->cmd.Data = NULL;
??afBuildMSGIncoming_1:
        LCALL     ?Subroutine31 & 0xFFFF
//  456   }
??CrossCallReturnLabel_44:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  457 
//  458 #if defined ( MT_AF_CB_FUNC )
//  459   // If ZDO or SAPI have registered for this endpoint, dont intercept it here
//  460   if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
//  461   {
//  462     MT_AfIncomingMsg( (void *)MSGpkt );
//  463     // Release the memory.
//  464     osal_msg_deallocate( (void *)MSGpkt );
//  465   }
//  466   else
//  467 #endif
//  468   {
//  469     // Send message through task message.
//  470     osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
??afBuildMSGIncoming_2:
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ?Subroutine9 & 0xFFFF
//  471   }
??CrossCallReturnLabel_89:
        MOV       R1,A
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  472 }
??afBuildMSGIncoming_0:
        MOV       A,#0x2
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function afBuildMSGIncoming
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOV       A,R6
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function afBuildMSGIncoming
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function afIncomingData
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function afIncomingData
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function afIncomingData
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function afBuildMSGIncoming
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function afFindSimpleDesc
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond70 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function afBuildMSGIncoming
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker72 Using cfiCommon1
          CFI (cfiPicker72) NoFunction
          CFI (cfiPicker72) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiPicker72
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function afIncomingData
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function afIncomingData
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function afBuildMSGIncoming
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function afBuildMSGIncoming
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function afBuildMSGIncoming
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function AF_DataRequest
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function AF_DataRequest
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function AF_DataRequest
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function AF_DataRequest
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function AF_DataRequest
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function afCopyAddress
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function afBuildMSGIncoming
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function afBuildMSGIncoming
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function AF_DataRequest
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function afBuildMSGIncoming
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function AF_DataRequest
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker94 Using cfiCommon1
          CFI (cfiPicker94) NoFunction
          CFI (cfiPicker94) Picker
        INC       DPTR
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiPicker94
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function afDelete
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function afIncomingData
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function afBuildMSGIncoming
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function afBuildMSGIncoming
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function AF_DataRequest
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function AF_DataRequest
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function AF_DataRequest
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function AF_DataRequest
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function afCopyAddress
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function AF_DataRequest
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function afBuildMSGIncoming
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function AF_DataRequest
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker108 Using cfiCommon1
          CFI (cfiPicker108) NoFunction
          CFI (cfiPicker108) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_104:
        RET
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiPicker108

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond109 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function AF_DataRequest
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_81
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-4
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function AF_DataRequest
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_79
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-4
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function afRegisterExtended
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_69
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-4
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function afDelete
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_70
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-4
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function afIncomingData
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_71
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-4
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function afBuildMSGIncoming
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_72
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-4
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function afBuildMSGIncoming
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_73
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-4
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function AF_DataRequest
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_74
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-4
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function AF_DataRequest
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_75
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function AF_DataRequest
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_76
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-4
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function AF_DataRequest
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_77
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-4
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function afCopyAddress
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_78
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-4
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function afBuildMSGIncoming
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_8
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function afBuildMSGIncoming
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_9
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function afIncomingData
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_99
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-4
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function afIncomingData
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_100
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function AF_DataRequest
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_101
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-4
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function afDelete
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_95
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function afIncomingData
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_96
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function afIncomingData
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_97
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function AF_DataRequest
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_93
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function AF_DataRequest
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_98
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function afEndPoints
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_94
          CFI (cfiCond132) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond132) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond132) CFA_SP SP+-9
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function afBuildMSGIncoming
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_20
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function afNumEndPoints
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_21
          CFI (cfiCond134) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond134) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond134) CFA_SP SP+-9
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function afBuildMSGIncoming
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        MOV       DPL,?V4
        MOV       DPH,?V5
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function afBuildMSGIncoming
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function AF_DataRequestSrcRtg
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function afBuildMSGIncoming
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function afBuildMSGIncoming
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker144 Using cfiCommon1
          CFI (cfiPicker144) NoFunction
          CFI (cfiPicker144) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        RET
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiPicker144

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond145 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function afBuildMSGIncoming
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker147 Using cfiCommon1
          CFI (cfiPicker147) NoFunction
          CFI (cfiPicker147) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiPicker147

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function afBuildMSGIncoming
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function afFindEndPointDescList
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond150) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond150) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond150) CFA_SP SP+-7
          CFI Block cfiPicker151 Using cfiCommon1
          CFI (cfiPicker151) NoFunction
          CFI (cfiPicker151) Picker
        INC       DPTR
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiPicker151
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine44_0:
          CFI Block cfiCond152 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function afDataConfirm
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function afBuildMSGIncoming
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function afFindEndPointDescList
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond155) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond155) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond155) CFA_SP SP+-7
          CFI Block cfiPicker156 Using cfiCommon1
          CFI (cfiPicker156) NoFunction
          CFI (cfiPicker156) Picker
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_92:
        RET
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiPicker156

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond157 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function afIncomingData
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_3
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-4
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function afDataConfirm
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_88
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-4
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function afBuildMSGIncoming
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-4
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function afFindEndPointDescList
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90
          CFI (cfiCond161) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond161) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond161) CFA_SP SP+-9
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function afIncomingData
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_87
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-4
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker163 Using cfiCommon1
          CFI (cfiPicker163) NoFunction
          CFI (cfiPicker163) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_121:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiPicker163
//  473 
//  474 /*********************************************************************
//  475  * @fn      AF_DataRequest
//  476  *
//  477  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  478  *          SendMulti and MSG-Send.
//  479  *
//  480  * input parameters
//  481  *
//  482  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  483  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  484  * @param   cID - A valid cluster ID as specified by the Profile.
//  485  * @param   len - Number of bytes of data pointed to by next param.
//  486  * @param  *buf - A pointer to the data bytes to send.
//  487  * @param  *transID - A pointer to a byte which can be modified and which will
//  488  *                    be used as the transaction sequence number of the msg.
//  489  * @param   options - Valid bit mask of Tx options.
//  490  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  491  *
//  492  * output parameters
//  493  *
//  494  * @param  *transID - Incremented by one if the return value is success.
//  495  *
//  496  * @return  afStatus_t - See previous definition of afStatus_... types.
//  497  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  498 uint8 AF_DataRequestDiscoverRoute = TRUE;
AF_DataRequestDiscoverRoute:
        DATA8
        DS 1
        REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  499 afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequest:
          CFI Block cfiBlock164 Using cfiCommon0
          CFI Function AF_DataRequest
        CODE
//  500                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  501                            uint8 options, uint8 radius )
//  502 {
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, RTG_CheckRtStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, APSDE_DataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 30
        MOV       A,#-0x1e
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V2,R1
//  503   pDescCB pfnDescCB;
//  504   ZStatus_t stat;
//  505   APSDE_DataReq_t req;
//  506   afDataReqMTU_t mtu;
//  507 
//  508   // Verify source end point
//  509   if ( srcEP == NULL )
        MOV       A,R4
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??AF_DataRequest_0 & 0xFFFF
//  510   {
//  511     return afStatus_INVALID_PARAMETER;
//  512   }
//  513 
//  514 #if !defined( REFLECTOR )
//  515   if ( dstAddr->addrMode == afAddrNotPresent )
//  516   {
//  517     return afStatus_INVALID_PARAMETER;
//  518   }
//  519 #endif
//  520 
//  521   // Check if route is available before sending data
//  522   if ( options & AF_LIMIT_CONCENTRATOR  )
        MOV       A,R1
        MOV       C,0xE0 /* A   */.3
        JNC       ??AF_DataRequest_1
//  523   {
//  524     if ( dstAddr->addrMode != afAddr16Bit )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        $+5
        LJMP      ??AF_DataRequest_0 & 0xFFFF
//  525     {
//  526       return ( afStatus_INVALID_PARAMETER );
//  527     }
//  528 
//  529     // First, make sure the destination is not its self, then check for an existing route.
//  530     if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
//  531         && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??AF_DataRequest_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??AF_DataRequest_2:
        JZ        ??AF_DataRequest_1
        ; Setup parameters for call to function RTG_CheckRtStatus
        MOV       R4,#0x3
        MOV       R1,#0x1
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_112:
        LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
        MOV       A,R1
        JZ        ??AF_DataRequest_1
//  532     {
//  533       // A valid route to a concentrator wasn't found
//  534       return ( afStatus_NO_ROUTE );
        MOV       R1,#-0x33
        LJMP      ??AF_DataRequest_3 & 0xFFFF
//  535     }
//  536   }
//  537 
//  538   // Validate broadcasting
//  539   if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
//  540        ( dstAddr->addrMode == afAddrBroadcast )    )
??AF_DataRequest_1:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??AF_DataRequest_4
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??AF_DataRequest_5
//  541   {
//  542     // Check for valid broadcast values
//  543     if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
??AF_DataRequest_4:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
        MOV       A,R1
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        JZ        ??AF_DataRequest_6
//  544     {
//  545       // Force mode to broadcast
//  546       dstAddr->addrMode = afAddrBroadcast;
        MOV       A,#0xf
        MOVX      @DPTR,A
//  547     }
//  548     else
//  549     {
//  550       // Address is not a valid broadcast type
//  551       if ( dstAddr->addrMode == afAddrBroadcast )
//  552       {
//  553         return afStatus_INVALID_PARAMETER;
//  554       }
//  555     }
//  556   }
//  557   else if ( dstAddr->addrMode != afAddr64Bit &&
//  558             dstAddr->addrMode != afAddrGroup &&
//  559             dstAddr->addrMode != afAddrNotPresent )
//  560   {
//  561     return afStatus_INVALID_PARAMETER;
//  562   }
//  563 
//  564   // Set destination address
//  565   req.dstAddr.addrMode = dstAddr->addrMode;
??AF_DataRequest_7:
        MOV       A,R6
        ADD       A,#0x8
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine29 & 0xFFFF
//  566   if ( dstAddr->addrMode == afAddr64Bit )
??CrossCallReturnLabel_39:
        JNZ       ??AF_DataRequest_8
//  567     osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??CrossCallReturnLabel_61
??AF_DataRequest_6:
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??AF_DataRequest_7
        SJMP      ??AF_DataRequest_0
??AF_DataRequest_5:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x3
        JZ        ??AF_DataRequest_7
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??AF_DataRequest_7
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??AF_DataRequest_7
??AF_DataRequest_0:
        MOV       R1,#0x2
        LJMP      ??AF_DataRequest_3 & 0xFFFF
//  568   else
//  569     req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
??AF_DataRequest_8:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine40_0 & 0xFFFF
//  570 
//  571   req.profileID = ZDO_PROFILE_ID;
??CrossCallReturnLabel_61:
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  572 
//  573   if ( (pfnDescCB = afGetDescCB( srcEP )) )
        MOV       DPTR,#epList
??AF_DataRequest_9:
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_93:
        JZ        ??AF_DataRequest_10
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_108:
        MOV       A,?V0
        XRL       A,R2
        JNZ       ??AF_DataRequest_11
        MOV       A,?V1
        XRL       A,R3
??AF_DataRequest_11:
        MOV       DPL,R0
        MOV       DPH,R1
        JNZ       ??AF_DataRequest_9
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        JZ        ??AF_DataRequest_10
//  574   {
//  575     uint16 *pID = (uint16 *)(pfnDescCB(
//  576                                  AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
        ; Setup parameters for indirect call
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R1,#0x2
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?CALL_IND
//  577     if ( pID )
        MOV       A,R2
        ORL       A,R3
        JZ        ??CrossCallReturnLabel_63
//  578     {
//  579       req.profileID = *pID;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine40_0 & 0xFFFF
//  580       osal_mem_free( pID );
??CrossCallReturnLabel_62:
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??CrossCallReturnLabel_63
//  581     }
//  582   }
//  583   else if ( srcEP->simpleDesc )
??AF_DataRequest_10:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_101:
        JZ        ??CrossCallReturnLabel_63
//  584   {
//  585     req.profileID = srcEP->simpleDesc->AppProfId;
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine22 & 0xFFFF
//  586   }
??CrossCallReturnLabel_54:
        LCALL     ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine40_0 & 0xFFFF
//  587 
//  588   req.txOptions = 0;
??CrossCallReturnLabel_63:
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  589 
//  590   if ( ( options & AF_ACK_REQUEST              ) &&
//  591        ( req.dstAddr.addrMode != AddrBroadcast ) &&
//  592        ( req.dstAddr.addrMode != AddrGroup     )    )
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.4
        JNC       ??AF_DataRequest_12
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xf
        JZ        ??AF_DataRequest_12
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??AF_DataRequest_12
//  593   {
//  594     req.txOptions |=  APS_TX_OPTIONS_ACK;
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  595   }
//  596 
//  597   if ( options & AF_SKIP_ROUTING )
??AF_DataRequest_12:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.7
        JNC       ??AF_DataRequest_13
//  598   {
//  599     req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ORL       A,#0x10
        MOVX      @DPTR,A
//  600   }
//  601 
//  602   if ( options & AF_EN_SECURITY )
??AF_DataRequest_13:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.6
        JNC       ??AF_DataRequest_14
//  603   {
//  604     req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ORL       A,#0x1
        MOVX      @DPTR,A
//  605     mtu.aps.secure = TRUE;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        SJMP      ??AF_DataRequest_15
//  606   }
//  607   else
//  608   {
//  609     mtu.aps.secure = FALSE;
??AF_DataRequest_14:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
??AF_DataRequest_15:
        MOVX      @DPTR,A
//  610   }
//  611 
//  612   if ( options & AF_PREPROCESS )
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.2
        JNC       ??AF_DataRequest_16
//  613   {
//  614     req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ORL       A,#0x40
        MOVX      @DPTR,A
//  615   }
//  616 
//  617   mtu.kvp = FALSE;
??AF_DataRequest_16:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        MOV       A,#0x34
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
//  618 
//  619   req.transID       = *transID;
??CrossCallReturnLabel_17:
        MOV       DPL,?V6
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine26 & 0xFFFF
//  620   req.srcEP         = srcEP->endPoint;
??CrossCallReturnLabel_30:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  621   req.dstEP         = dstAddr->endPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  622   req.clusterID     = cID;
        MOV       A,#0x2e
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_76:
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV       A,#0x30
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  623   req.asduLen       = len;
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  624   req.asdu          = buf;
        MOV       A,#0x32
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine40_0 & 0xFFFF
//  625   req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
??CrossCallReturnLabel_65:
        MOV       DPTR,#AF_DataRequestDiscoverRoute
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  626   req.radiusCounter = radius;
        MOV       A,#0x36
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  627 #if defined ( INTER_PAN )
//  628   req.dstPanId      = dstAddr->panId;
//  629 
//  630   if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
//  631   {
//  632     if ( len > INTERP_DataReqMTU() )
//  633     {
//  634       stat = afStatus_INVALID_PARAMETER;
//  635     }
//  636     else
//  637     {
//  638       stat = INTERP_DataReq( &req );
//  639     }
//  640   }
//  641   else
//  642 #endif // INTER_PAN
//  643   {
//  644     if (len > afDataReqMTU( &mtu ) )
        ; Setup parameters for call to function afDataReqMTU
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
        MOV       A,R1
        CLR       C
        SUBB      A,R6
        CLR       A
        SUBB      A,R7
        JNC       ??AF_DataRequest_17
//  645     {
//  646       if (apsfSendFragmented)
        MOV       DPTR,#apsfSendFragmented
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_98:
        JZ        ??AF_DataRequest_18
//  647       {
//  648         stat = (*apsfSendFragmented)( &req );
        ; Setup parameters for indirect call
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine39_0 & 0xFFFF
//  649       }
??CrossCallReturnLabel_51:
        LCALL     ?CALL_IND
        SJMP      ??AF_DataRequest_19
//  650       else
//  651       {
//  652         stat = afStatus_INVALID_PARAMETER;
??AF_DataRequest_18:
        MOV       R6,#0x2
        SJMP      ??AF_DataRequest_20
//  653       }
//  654     }
//  655     else
//  656     {
//  657       stat = APSDE_DataReq( &req );
??AF_DataRequest_17:
        ; Setup parameters for call to function APSDE_DataReq
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
??AF_DataRequest_19:
        MOV       A,R1
        MOV       R6,A
//  658     }
//  659   }
//  660 
//  661   /*
//  662    * If this is an EndPoint-to-EndPoint message on the same device, it will not
//  663    * get added to the NWK databufs. So it will not go OTA and it will not get
//  664    * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
//  665    * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
//  666    * message with the first in line TransSeqNumber, even on a multi message.
//  667    * Also note that a reflected msg will not have its confirmation generated
//  668    * here.
//  669    */
//  670   if ( (req.dstAddr.addrMode == Addr16Bit) &&
//  671        (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
??AF_DataRequest_20:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??AF_DataRequest_21
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??AF_DataRequest_22
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??AF_DataRequest_22:
        JNZ       ??AF_DataRequest_21
//  672   {
//  673     afDataConfirm( srcEP->endPoint, *transID, stat );
        ; Setup parameters for call to function afDataConfirm
        MOV       A,R6
        MOV       R3,A
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
//  674   }
//  675 
//  676   if ( stat == afStatus_SUCCESS )
??AF_DataRequest_21:
        MOV       A,R6
        JNZ       ??AF_DataRequest_23
//  677   {
//  678     (*transID)++;
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  679   }
//  680 
//  681   return (afStatus_t)stat;
??AF_DataRequest_23:
        MOV       A,R6
        MOV       R1,A
??AF_DataRequest_3:
        MOV       A,#0x1e
        LJMP      ?Subroutine3 & 0xFFFF
//  682 }
          CFI EndBlock cfiBlock164

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function afBuildMSGIncoming
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function AF_DataRequest
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        RET
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond169 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function afIncomingData
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function AF_DataRequest
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker172 Using cfiCommon1
          CFI (cfiPicker172) NoFunction
          CFI (cfiPicker172) Picker
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        RET
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiPicker172

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond173 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_99
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function afIncomingData
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function AF_DataRequest
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker176 Using cfiCommon1
          CFI (cfiPicker176) NoFunction
          CFI (cfiPicker176) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiPicker176
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine45_0:
          CFI Block cfiCond177 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_95
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function afIncomingData
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function afIncomingData
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function AF_DataRequest
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function AF_DataRequest
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function afEndPoints
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond182) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond182) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond182) CFA_SP SP+-7
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function afIncomingData
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function afIncomingData
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function AF_DataRequest
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker186 Using cfiCommon1
          CFI (cfiPicker186) NoFunction
          CFI (cfiPicker186) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_105:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiPicker186
//  683 
//  684 #if defined ( ZIGBEE_SOURCE_ROUTING )
//  685 /*********************************************************************
//  686  * @fn      AF_DataRequestSrcRtg
//  687  *
//  688  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  689  *          SendMulti and MSG-Send.
//  690  *
//  691  * input parameters
//  692  *
//  693  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  694  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  695  * @param   cID - A valid cluster ID as specified by the Profile.
//  696  * @param   len - Number of bytes of data pointed to by next param.
//  697  * @param  *buf - A pointer to the data bytes to send.
//  698  * @param  *transID - A pointer to a byte which can be modified and which will
//  699  *                    be used as the transaction sequence number of the msg.
//  700  * @param   options - Valid bit mask of Tx options.
//  701  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  702  * @param   relayCnt - Number of devices in the relay list
//  703  * @param   pRelayList - Pointer to the relay list
//  704  *
//  705  * output parameters
//  706  *
//  707  * @param  *transID - Incremented by one if the return value is success.
//  708  *
//  709  * @return  afStatus_t - See previous definition of afStatus_... types.
//  710  */
//  711 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  712 afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequestSrcRtg:
          CFI Block cfiBlock187 Using cfiCommon0
          CFI Function AF_DataRequestSrcRtg
        CODE
//  713                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  714                            uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
//  715 {
        FUNCALL AF_DataRequestSrcRtg, RTG_AddSrcRtgEntry_Guaranteed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequestSrcRtg, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V2,R4
        MOV       ?V3,R5
        MOV       ?V0,R1
//  716   uint8 status;
//  717 
//  718   /* Add the source route to the source routing table */
//  719   status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
//  720                                          pRelayList );
        ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_114:
        LCALL     `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
        MOV       A,R1
        MOV       R1,A
//  721 
//  722   if( status == RTG_SUCCESS)
        JNZ       ??AF_DataRequestSrcRtg_0
//  723   {
//  724     /* Call AF_DataRequest to send the data */
//  725     status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
        ; Setup parameters for call to function AF_DataRequest
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R1,?V0
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R1,A
        SJMP      ??AF_DataRequestSrcRtg_1
//  726   }
//  727   else if( status == RTG_INVALID_PATH )
??AF_DataRequestSrcRtg_0:
        MOV       A,#0x5
        XRL       A,R1
        JNZ       ??AF_DataRequestSrcRtg_2
//  728   {
//  729     /* The source route relay count is exceeding the network limit */
//  730     status = afStatus_INVALID_PARAMETER;
        MOV       R1,#0x2
        SJMP      ??AF_DataRequestSrcRtg_1
//  731   }
//  732   else
//  733   {
//  734     /* The guaranteed adding entry fails due to memory failure */
//  735     status = afStatus_MEM_FAIL;
??AF_DataRequestSrcRtg_2:
        MOV       R1,#0x10
//  736   }
//  737   return status;
??AF_DataRequestSrcRtg_1:
        LJMP      ?Subroutine0 & 0xFFFF
//  738 }
          CFI EndBlock cfiBlock187
//  739 
//  740 #endif
//  741 
//  742 /*********************************************************************
//  743  * @fn      afFindEndPointDescList
//  744  *
//  745  * @brief   Find the endpoint description entry from the endpoint
//  746  *          number.
//  747  *
//  748  * @param   EndPoint - Application Endpoint to look for
//  749  *
//  750  * @return  the address to the endpoint/interface description entry
//  751  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  752 static epList_t *afFindEndPointDescList( uint8 EndPoint )
afFindEndPointDescList:
          CFI Block cfiBlock188 Using cfiCommon0
          CFI Function afFindEndPointDescList
        CODE
//  753 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  754   epList_t *epSearch;
//  755 
//  756   for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
        MOV       DPTR,#epList
        SJMP      ??afFindEndPointDescList_0
??afFindEndPointDescList_1:
        MOV       DPL,R2
        MOV       DPH,R3
??afFindEndPointDescList_0:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ        ??afFindEndPointDescList_2
//  757   {
//  758     if (epSearch->epDesc->endPoint == EndPoint)
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        LCALL     ?Subroutine9 & 0xFFFF
//  759     {
//  760       break;
//  761     }
//  762   }
??CrossCallReturnLabel_90:
        XRL       A,R1
        JNZ       ??afFindEndPointDescList_1
//  763 
//  764   return epSearch;
??afFindEndPointDescList_2:
          CFI EndBlock cfiBlock188
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  765 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock189 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock189

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond190 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function afFindEndPointDescList
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond191) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond191) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond191) CFA_SP SP+-7
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function afFindSimpleDesc
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker193 Using cfiCommon1
          CFI (cfiPicker193) NoFunction
          CFI (cfiPicker193) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiPicker193
//  766 
//  767 /*********************************************************************
//  768  * @fn      afFindEndPointDesc
//  769  *
//  770  * @brief   Find the endpoint description entry from the endpoint
//  771  *          number.
//  772  *
//  773  * @param   EndPoint - Application Endpoint to look for
//  774  *
//  775  * @return  the address to the endpoint/interface description entry
//  776  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  777 endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
afFindEndPointDesc:
          CFI Block cfiBlock194 Using cfiCommon0
          CFI Function afFindEndPointDesc
        CODE
//  778 {
        FUNCALL afFindEndPointDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  779   epList_t *epSearch;
//  780 
//  781   // Look for the endpoint
//  782   epSearch = afFindEndPointDescList( EndPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       DPL,R2
        MOV       DPH,R3
//  783 
//  784   if ( epSearch )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??afFindEndPointDesc_0
//  785     return ( epSearch->epDesc );
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_109:
        SJMP      ??afFindEndPointDesc_1
//  786   else
//  787     return ( (endPointDesc_t *)NULL );
??afFindEndPointDesc_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
??afFindEndPointDesc_1:
        LJMP      ?Subroutine1 & 0xFFFF
//  788 }
          CFI EndBlock cfiBlock194

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond195 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_112
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function AF_DataRequest
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function AF_DataRequestSrcRtg
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker198 Using cfiCommon1
          CFI (cfiPicker198) NoFunction
          CFI (cfiPicker198) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiPicker198
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine46_0:
          CFI Block cfiCond199 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_106
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function afIncomingData
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-2
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function AF_DataRequest
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function afFindEndPointDesc
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function afFindSimpleDesc
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function afNumEndPoints
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond204) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond204) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond204) CFA_SP SP+-7
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function AF_DataRequest
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function AF_DataRequest
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function AF_DataRequestSrcRtg
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker208 Using cfiCommon1
          CFI (cfiPicker208) NoFunction
          CFI (cfiPicker208) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiPicker208
//  789 
//  790 /*********************************************************************
//  791  * @fn      afFindSimpleDesc
//  792  *
//  793  * @brief   Find the Simple Descriptor from the endpoint number.
//  794  *
//  795  * @param   EP - Application Endpoint to look for.
//  796  *
//  797  * @return  Non-zero to indicate that the descriptor memory must be freed.
//  798  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  799 uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
afFindSimpleDesc:
          CFI Block cfiBlock209 Using cfiCommon0
          CFI Function afFindSimpleDesc
        CODE
//  800 {
        FUNCALL afFindSimpleDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R1
//  801   epList_t *epItem = afFindEndPointDescList( EP );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
//  802   uint8 rtrn = FALSE;
        MOV       R1,#0x0
//  803 
//  804   if ( epItem )
        MOV       A,R4
        ORL       A,R5
        JZ        ??afFindSimpleDesc_0
//  805   {
//  806     if ( epItem->pfnDescCB )
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_14:
        JZ        ??afFindSimpleDesc_1
//  807     {
//  808       *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
        ; Setup parameters for indirect call
        MOV       R2,?V0
        INC       R1
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL     ?CALL_IND
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine28 & 0xFFFF
//  809       rtrn = TRUE;
??CrossCallReturnLabel_38:
        MOV       R1,#0x1
        SJMP      ??afFindSimpleDesc_2
//  810     }
//  811     else
//  812     {
//  813       *ppDesc = epItem->epDesc->simpleDesc;
??afFindSimpleDesc_1:
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine12 & 0xFFFF
//  814     }
//  815   }
??CrossCallReturnLabel_11:
        LCALL     ??Subroutine46_0 & 0xFFFF
??CrossCallReturnLabel_110:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        SJMP      ??afFindSimpleDesc_3
//  816   else
//  817   {
//  818     *ppDesc = NULL;
??afFindSimpleDesc_0:
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
??afFindSimpleDesc_3:
        MOVX      @DPTR,A
//  819   }
//  820 
//  821   return rtrn;
??afFindSimpleDesc_2:
          CFI EndBlock cfiBlock209
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  822 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock210 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock210

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond211 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_116
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function afFindSimpleDesc
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-2
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker213 Using cfiCommon1
          CFI (cfiPicker213) NoFunction
          CFI (cfiPicker213) Picker
        INC       DPTR
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiPicker213
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine47_0:
          CFI Block cfiCond214 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_115
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function afIncomingData
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function afFindSimpleDesc
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_122:
        RET
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond218 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function afIncomingData
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_3
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-6
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function afDataConfirm
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_88
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-6
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function afBuildMSGIncoming
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-6
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function afFindEndPointDescList
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90
          CFI (cfiCond222) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond222) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond222) CFA_SP SP+-11
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function afIncomingData
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_87
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-6
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function afIncomingData
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_116
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-4
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function afFindSimpleDesc
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_117
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-4
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function afIncomingData
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_115
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-4
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker227 Using cfiCommon1
          CFI (cfiPicker227) NoFunction
          CFI (cfiPicker227) Picker
        MOVX      A,@DPTR
        MOV       R0,A
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiPicker227
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond228 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function afIncomingData
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_23
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-6
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function afIncomingData
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_6
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-6
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function afIncomingData
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_7
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-6
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function afIncomingData
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_0
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-6
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function afIncomingData
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_1
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-6
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function afIncomingData
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_10
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-6
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function afFindSimpleDesc
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_11
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-6
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function afIncomingData
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_2
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-6
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function afIncomingData
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_3
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-6
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function afDataConfirm
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_88
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-6
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function afBuildMSGIncoming
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-6
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function afFindEndPointDescList
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90
          CFI (cfiCond240) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond240) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond240) CFA_SP SP+-11
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function afIncomingData
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_87
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-6
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function afIncomingData
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_116
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-4
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function afFindSimpleDesc
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_117
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-4
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function afIncomingData
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_115
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-4
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker245 Using cfiCommon1
          CFI (cfiPicker245) NoFunction
          CFI (cfiPicker245) Picker
        INC       DPTR
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiPicker245
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond246 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function AF_DataRequest
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_54
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-4
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function afIncomingData
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_52
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond248) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-4
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function AF_DataRequest
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_51
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond249) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+-4
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function afIncomingData
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_22
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-6
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function afIncomingData
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_23
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-6
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function afIncomingData
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_6
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-6
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function afIncomingData
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_119, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_7
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-6
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function afIncomingData
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_0
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-6
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function afIncomingData
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_1
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-6
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond256 Using cfiCommon0
          CFI (cfiCond256) Function afIncomingData
          CFI (cfiCond256) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_10
          CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond256) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond256) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond256) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond256) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond256) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond256) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond256) CFA_SP SP+-6
          CFI (cfiCond256) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond257 Using cfiCommon0
          CFI (cfiCond257) Function afFindSimpleDesc
          CFI (cfiCond257) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_11
          CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond257) CFA_SP SP+-6
          CFI (cfiCond257) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function afIncomingData
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_2
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond258) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond258) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-6
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function afIncomingData
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_3
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond259) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond259) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond259) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond259) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-6
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function afDataConfirm
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_88
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-6
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function afBuildMSGIncoming
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond261) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+-6
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function afFindEndPointDescList
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90
          CFI (cfiCond262) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond262) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond262) CFA_SP SP+-11
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function afIncomingData
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_87
          CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond263) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond263) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond263) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond263) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond263) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond263) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond263) CFA_SP SP+-6
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function afIncomingData
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_116
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-4
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function afFindSimpleDesc
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_117
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-4
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function afIncomingData
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_115
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond266) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-4
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker267 Using cfiCommon1
          CFI (cfiPicker267) NoFunction
          CFI (cfiPicker267) Picker
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiCond256
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiPicker267

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond268 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function afFindSimpleDesc
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+-2
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker270 Using cfiCommon1
          CFI (cfiPicker270) NoFunction
          CFI (cfiPicker270) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_50:
        RET
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiPicker270

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond271 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function afIncomingData
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_1
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond272) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond272) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond272) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+-4
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function afIncomingData
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_10
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond273) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+-4
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function afFindSimpleDesc
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_11
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-4
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker275 Using cfiCommon1
          CFI (cfiPicker275) NoFunction
          CFI (cfiPicker275) Picker
        LCALL     ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_120:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiPicker275
//  823 
//  824 /*********************************************************************
//  825  * @fn      afGetDescCB
//  826  *
//  827  * @brief   Get the Descriptor callback function.
//  828  *
//  829  * @param   epDesc - pointer to the endpoint descriptor
//  830  *
//  831  * @return  function pointer or NULL
//  832  */
//  833 static pDescCB afGetDescCB( endPointDesc_t *epDesc )
//  834 {
//  835   epList_t *epSearch;
//  836 
//  837   // Start at the beginning
//  838   epSearch = epList;
//  839 
//  840   // Look through the list until the end
//  841   while ( epSearch )
//  842   {
//  843     // Is there a match?
//  844     if ( epSearch->epDesc == epDesc )
//  845     {
//  846       return ( epSearch->pfnDescCB );
//  847     }
//  848     else
//  849       epSearch = epSearch->nextDesc;  // Next entry
//  850   }
//  851 
//  852   return ( (pDescCB)NULL );
//  853 }
//  854 
//  855 /*********************************************************************
//  856  * @fn      afDataReqMTU
//  857  *
//  858  * @brief   Get the Data Request MTU(Max Transport Unit).
//  859  *
//  860  * @param   fields - afDataReqMTU_t
//  861  *
//  862  * @return  uint8(MTU)
//  863  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  864 uint8 afDataReqMTU( afDataReqMTU_t* fields )
afDataReqMTU:
          CFI Block cfiBlock276 Using cfiCommon0
          CFI Function afDataReqMTU
        CODE
//  865 {
        FUNCALL afDataReqMTU, APSDE_DataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  866   uint8 len;
//  867   uint8 hdr;
//  868 
//  869   if ( fields->kvp == TRUE )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??afDataReqMTU_0
//  870   {
//  871     hdr = AF_HDR_KVP_MAX_LEN;
        MOV       R6,#0x8
        SJMP      ??afDataReqMTU_1
//  872   }
//  873   else
//  874   {
//  875     hdr = AF_HDR_V1_1_MAX_LEN;
??afDataReqMTU_0:
        MOV       R6,#0x0
//  876   }
//  877 
//  878   len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
//  879 
//  880   return len;
??afDataReqMTU_1:
        ; Setup parameters for call to function APSDE_DataReqMTU
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
        MOV       A,R1
        CLR       C
        SUBB      A,R6
        MOV       R1,A
        LJMP      ?Subroutine2 & 0xFFFF
//  881 }
          CFI EndBlock cfiBlock276
//  882 
//  883 /*********************************************************************
//  884  * @fn      afGetMatch
//  885  *
//  886  * @brief   Set the allow response flag.
//  887  *
//  888  * @param   ep - Application Endpoint to look for
//  889  * @param   action - true - allow response, false - no response
//  890  *
//  891  * @return  TRUE allow responses, FALSE no response
//  892  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  893 uint8 afGetMatch( uint8 ep )
afGetMatch:
          CFI Block cfiBlock277 Using cfiCommon0
          CFI Function afGetMatch
        CODE
//  894 {
        FUNCALL afGetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  895   epList_t *epSearch;
//  896 
//  897   // Look for the endpoint
//  898   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       DPL,R2
        MOV       DPH,R3
//  899 
//  900   if ( epSearch )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??afGetMatch_0
//  901   {
//  902     if ( epSearch->flags & eEP_AllowMatch )
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??afGetMatch_0
//  903       return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??afGetMatch_1
//  904     else
//  905       return ( FALSE );
//  906   }
//  907   else
//  908     return ( FALSE );
??afGetMatch_0:
        MOV       R1,#0x0
??afGetMatch_1:
          CFI EndBlock cfiBlock277
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  909 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock278 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock278
//  910 
//  911 /*********************************************************************
//  912  * @fn      afSetMatch
//  913  *
//  914  * @brief   Set the allow response flag.
//  915  *
//  916  * @param   ep - Application Endpoint to look for
//  917  * @param   action - true - allow response, false - no response
//  918  *
//  919  * @return  TRUE if success, FALSE if endpoint not found
//  920  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  921 uint8 afSetMatch( uint8 ep, uint8 action )
afSetMatch:
          CFI Block cfiBlock279 Using cfiCommon0
          CFI Function afSetMatch
        CODE
//  922 {
        FUNCALL afSetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R7,A
//  923   epList_t *epSearch;
//  924 
//  925   // Look for the endpoint
//  926   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       DPL,R2
        MOV       DPH,R3
//  927 
//  928   if ( epSearch )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??afSetMatch_0
//  929   {
//  930     if ( action )
        MOV       A,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        JZ        ??afSetMatch_1
//  931     {
//  932       epSearch->flags |= eEP_AllowMatch;
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.0
        SJMP      ??afSetMatch_2
//  933     }
//  934     else
//  935     {
//  936       epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
??afSetMatch_1:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.0
??afSetMatch_2:
        MOVX      @DPTR,A
//  937     }
//  938     return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??afSetMatch_3
//  939   }
//  940   else
//  941     return ( FALSE );
??afSetMatch_0:
        MOV       R1,#0x0
??afSetMatch_3:
        SJMP      ?Subroutine1
//  942 }
          CFI EndBlock cfiBlock279
//  943 
//  944 /*********************************************************************
//  945  * @fn      afNumEndPoints
//  946  *
//  947  * @brief   Returns the number of endpoints defined (including 0)
//  948  *
//  949  * @param   none
//  950  *
//  951  * @return  number of endpoints
//  952  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  953 uint8 afNumEndPoints( void )
afNumEndPoints:
          CFI Block cfiBlock280 Using cfiCommon0
          CFI Function afNumEndPoints
        CODE
//  954 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  955   epList_t *epSearch;
//  956   uint8 endpoints;
//  957 
//  958   // Start at the beginning
//  959   epSearch = epList;
        MOV       DPTR,#epList
        LCALL     ?Subroutine19 & 0xFFFF
//  960   endpoints = 0;
??CrossCallReturnLabel_21:
        MOV       R1,#0x0
        SJMP      ??afNumEndPoints_0
//  961 
//  962   while ( epSearch )
//  963   {
//  964     endpoints++;
??afNumEndPoints_1:
        INC       R1
//  965     epSearch = epSearch->nextDesc;
        LCALL     ??Subroutine46_0 & 0xFFFF
//  966   }
??CrossCallReturnLabel_111:
        MOV       DPL,R2
        MOV       DPH,R3
??afNumEndPoints_0:
        MOV       A,DPL
        ORL       A,DPH
        JNZ       ??afNumEndPoints_1
//  967 
//  968   return ( endpoints );
        LJMP      ?Subroutine4 & 0xFFFF
//  969 }
          CFI EndBlock cfiBlock280

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond281 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function afNumEndPoints
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond282) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond282) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond282) CFA_SP SP+-7
          CFI Block cfiPicker283 Using cfiCommon1
          CFI (cfiPicker283) NoFunction
          CFI (cfiPicker283) Picker
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_103:
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiPicker283
//  970 
//  971 /*********************************************************************
//  972  * @fn      afEndPoints
//  973  *
//  974  * @brief   Fills in the passed in buffer with the endpoint (numbers).
//  975  *          Use afNumEndPoints to find out how big a buffer to supply.
//  976  *
//  977  * @param   epBuf - pointer to mem used
//  978  *
//  979  * @return  void
//  980  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  981 void afEndPoints( uint8 *epBuf, uint8 skipZDO )
afEndPoints:
          CFI Block cfiBlock284 Using cfiCommon0
          CFI Function afEndPoints
        CODE
//  982 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
        MOV       R4,A
//  983   epList_t *epSearch;
//  984   uint8 endPoint;
//  985 
//  986   // Start at the beginning
//  987   epSearch = epList;
        MOV       DPTR,#epList
        SJMP      ??afEndPoints_0
//  988 
//  989   while ( epSearch )
//  990   {
//  991     endPoint = epSearch->epDesc->endPoint;
??afEndPoints_1:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R5
        MOVX      A,@DPTR
        MOV       R5,A
//  992 
//  993     if ( !skipZDO || endPoint != 0 )
        MOV       A,R4
        JZ        ??afEndPoints_2
        MOV       A,R5
        JZ        ??afEndPoints_3
//  994       *epBuf++ = endPoint;
??afEndPoints_2:
        MOV       A,R5
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
//  995 
//  996     epSearch = epSearch->nextDesc;
??afEndPoints_3:
        MOV       DPL,R0
        MOV       DPH,R1
//  997   }
??afEndPoints_0:
        LCALL     ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_94:
        JNZ       ??afEndPoints_1
//  998 }
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock284
//  999 
// 1000 /*********************************************************************
// 1001  * @fn      afCopyAddress
// 1002  *
// 1003  * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
// 1004  *          from the zAddrType_t parameter.
// 1005  *
// 1006  * @param   epBuf - pointer to mem used
// 1007  *
// 1008  * @return  void
// 1009  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1010 void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
afCopyAddress:
          CFI Block cfiBlock285 Using cfiCommon0
          CFI Function afCopyAddress
        CODE
// 1011 {
        FUNCALL afCopyAddress, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1012   afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
        MOV       A,R4
        ADD       A,#0x8
        MOV       R0,A
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine29 & 0xFFFF
// 1013   if ( zAddr->addrMode == Addr64Bit )
??CrossCallReturnLabel_40:
        JNZ       ??afCopyAddress_0
// 1014   {
// 1015     (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??CrossCallReturnLabel_66
// 1016   }
// 1017   else
// 1018   {
// 1019     afAddr->addr.shortAddr = zAddr->addr.shortAddr;
??afCopyAddress_0:
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine42_0 & 0xFFFF
// 1020   }
??CrossCallReturnLabel_78:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine40_0 & 0xFFFF
// 1021 
// 1022   // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
// 1023   afAddr->panId = 0;
??CrossCallReturnLabel_66:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1024 }
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock285

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond286 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function afCopyAddress
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-2
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker288 Using cfiCommon1
          CFI (cfiPicker288) NoFunction
          CFI (cfiPicker288) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,#0x3
        RET
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiPicker288
// 1025 
// 1026 /**************************************************************************************************
// 1027  * @fn          afAPSF_ConfigGet
// 1028  *
// 1029  * @brief       This function ascertains the fragmentation configuration that corresponds to
// 1030  *              the specified EndPoint.
// 1031  *
// 1032  * input parameters
// 1033  *
// 1034  * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
// 1035  *
// 1036  * output parameters
// 1037  *
// 1038  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1039  *
// 1040  * @return      None.
// 1041  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1042 void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigGet:
          CFI Block cfiBlock289 Using cfiCommon0
          CFI Function afAPSF_ConfigGet
        CODE
// 1043 {
        FUNCALL afAPSF_ConfigGet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigGet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1044   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
// 1045 
// 1046   if (pList == NULL)
        MOV       A,R0
        ORL       A,R1
        JNZ       ??afAPSF_ConfigGet_0
// 1047   {
// 1048     pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x32
        MOVX      @DPTR,A
// 1049     pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
        SJMP      ??afAPSF_ConfigGet_1
// 1050   }
// 1051   else
// 1052   {
// 1053     (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigGet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R0
        ADD       A,#0x6
        MOV       ?V0,A
        CLR       A
        ADDC      A,R1
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1054   }
// 1055 }
??afAPSF_ConfigGet_1:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock289
// 1056 
// 1057 /**************************************************************************************************
// 1058  * @fn          afAPSF_ConfigSet
// 1059  *
// 1060  * @brief       This function attempts to set the fragmentation configuration that corresponds to
// 1061  *              the specified EndPoint.
// 1062  *
// 1063  * input parameters
// 1064  *
// 1065  * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
// 1066  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1067  *
// 1068  * output parameters
// 1069  *
// 1070  * None.
// 1071  *
// 1072  * @return      afStatus_SUCCESS for success.
// 1073  *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
// 1074  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1075 afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigSet:
          CFI Block cfiBlock290 Using cfiCommon0
          CFI Function afAPSF_ConfigSet
        CODE
// 1076 {
        FUNCALL afAPSF_ConfigSet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1077   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
// 1078 
// 1079   if (pList == NULL)
        MOV       A,R2
        ORL       A,R3
        JNZ       ??afAPSF_ConfigSet_0
// 1080   {
// 1081     return afStatus_INVALID_PARAMETER;
        MOV       R1,#0x2
        SJMP      ??afAPSF_ConfigSet_1
// 1082   }
// 1083 
// 1084   (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigSet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0x6
        MOV       R2,A
        JNC       ??afAPSF_ConfigSet_2
        INC       R3
??afAPSF_ConfigSet_2:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 1085   return afStatus_SUCCESS;
        MOV       R1,#0x0
??afAPSF_ConfigSet_1:
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
// 1086 }
          CFI EndBlock cfiBlock290

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AF_DataRequestDiscoverRoute>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afRegisterExtended::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegisterExtended

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afRegister::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDelete::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDelete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDataConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afIncomingData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afIncomingData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afBuildMSGIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afBuildMSGIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AF_DataRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AF_DataRequestSrcRtg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequestSrcRtg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindEndPointDescList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDescList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindEndPointDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindSimpleDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindSimpleDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDataReqMTU::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataReqMTU

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afGetMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afGetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afSetMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afNumEndPoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afNumEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afEndPoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afCopyAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afCopyAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afAPSF_ConfigGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afAPSF_ConfigSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigSet

        END
// 1087 
// 1088 /**************************************************************************************************
// 1089 */
// 
// 3 166 bytes in segment BANKED_CODE
//   114 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
// 1 026 bytes in segment XDATA_Z
// 
//   115 bytes of CODE     memory
// 3 166 bytes of HUGECODE memory
// 1 027 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
